import asyncio
from aiogram.enums import ParseMode
import requests
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from config import API_TOKEN, WB_API, interval

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
processed_orders = set()
first_run = True
check_wb_task = None
check_balance_task = None

current_balance = None
for_withdraw_balance = None

# –ú–∞–ø–ø–∏–Ω–≥ –≤–∞–ª—é—Ç (—á–∏—Å–ª–æ–≤—ã–µ –∫–æ–¥—ã –¥–ª—è –∑–∞–∫–∞–∑–æ–≤)
currency_mapping = {
    643: ('RUB', '‚ÇΩ', '–†–æ—Å—Å–∏–π—Å–∫–∏–π —Ä—É–±–ª—å'),
    840: ('USD', '$', '–î–æ–ª–ª–∞—Ä –°–®–ê'),
    978: ('EUR', '‚Ç¨', '–ï–≤—Ä–æ'),
    398: ('KZT', '‚Ç∏', '–ö–∞–∑–∞—Ö—Å—Ç–∞–Ω—Å–∫–∏–π —Ç–µ–Ω–≥–µ'),
    156: ('CNY', '¬•', '–ö–∏—Ç–∞–π—Å–∫–∏–π —é–∞–Ω—å'),
    826: ('GBP', '¬£', '–ë—Ä–∏—Ç–∞–Ω—Å–∫–∏–π —Ñ—É–Ω—Ç'),
    392: ('JPY', '¬•', '–Ø–ø–æ–Ω—Å–∫–∞—è –∏–µ–Ω–∞'),
}

# –°–∏–º–≤–æ–ª—ã –≤–∞–ª—é—Ç (—Å—Ç—Ä–æ–∫–æ–≤—ã–µ –∫–æ–¥—ã –¥–ª—è –±–∞–ª–∞–Ω—Å–∞)
currency_symbols = {
    'RUB': '‚ÇΩ',
    'USD': '$',
    'EUR': '‚Ç¨',
    'KZT': '‚Ç∏',
    'CNY': '¬•',
    'GBP': '¬£',
    'JPY': '¬•'
}

bot = Bot(token=API_TOKEN)
dp = Dispatcher()

@dp.message(Command("start"))
async def start_handler(message: types.Message):
    global check_wb_task, check_balance_task
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –í—ã–ø–æ–ª–Ω—è—é –ø—Ä–æ–≤–µ—Ä–∫—É API...")
    
    if check():
        await message.answer("WB API –ø–æ–¥–∫–ª—é—á–µ–Ω–æ")
        
        # –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–∫–∞–∑–æ–≤
        if check_wb_task is None or check_wb_task.done():
            check_wb_task = asyncio.create_task(check_new_orders(message))
            await message.answer("–ù–∞—á–∏–Ω–∞—é –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–æ–≤—ã—Ö –∑–∞–∫–∞–∑–æ–≤")
        else:
            await message.answer("–§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–∫–∞–∑–æ–≤ —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è")
        
        # –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–ª–∞–Ω—Å–∞
        if check_balance_task is None or check_balance_task.done():
            check_balance_task = asyncio.create_task(check_balance(message))
            await message.answer("–ù–∞—á–∏–Ω–∞—é –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–ª–∞–Ω—Å–∞")
        else:
            await message.answer("–§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–ª–∞–Ω—Å–∞ —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è")
    else:
        await message.answer("WB API –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–æ(((")
        await message.answer("–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –ø—Ä–µ—Ä–≤–∞–Ω–æ")

@dp.message(Command("chatid"))
async def chatid_handler(message: types.Message):
    chat_id = message.chat.id
    await message.answer(f"Chat ID —ç—Ç–æ–≥–æ —á–∞—Ç–∞: {chat_id}")

@dp.message(Command("check"))
async def check_handler(message: types.Message):
    if check():
        await message.answer("WB API –ø–æ–¥–∫–ª—é—á–µ–Ω–æ")
    else:
        await message.answer("WB API –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–æ(((")

@dp.message(Command("status"))
async def status_handler(message: types.Message):
    global check_wb_task, check_balance_task
    
    # –°—Ç–∞—Ç—É—Å –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–∫–∞–∑–æ–≤
    if check_wb_task is None:
        order_status = "–§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–∫–∞–∑–æ–≤ –Ω–µ –∑–∞–ø—É—â–µ–Ω–∞"
    elif check_wb_task.done():
        order_status = "–§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–∫–∞–∑–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞"
    else:
        order_status = "–§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–∫–∞–∑–æ–≤ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è"
    
    # –°—Ç–∞—Ç—É—Å –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–ª–∞–Ω—Å–∞
    if check_balance_task is None:
        balance_status = "–§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–ª–∞–Ω—Å–∞ –Ω–µ –∑–∞–ø—É—â–µ–Ω–∞"
    elif check_balance_task.done():
        balance_status = "–§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–ª–∞–Ω—Å–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞"
    else:
        balance_status = "–§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–ª–∞–Ω—Å–∞ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è"
    
    await message.answer(f"{order_status}\n{balance_status}")

@dp.message(Command("stop"))
async def stop_handler(message: types.Message):
    global check_wb_task, check_balance_task
    stopped_tasks = []
    
    # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–∫–∞–∑–æ–≤
    if check_wb_task is not None and not check_wb_task.done():
        check_wb_task.cancel()
        try:
            await check_wb_task
        except asyncio.CancelledError:
            pass
        check_wb_task = None
        stopped_tasks.append("–ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–∫–∞–∑–æ–≤")
    
    # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–ª–∞–Ω—Å–∞
    if check_balance_task is not None and not check_balance_task.done():
        check_balance_task.cancel()
        try:
            await check_balance_task
        except asyncio.CancelledError:
            pass
        check_balance_task = None
        stopped_tasks.append("–ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–ª–∞–Ω—Å–∞")
    
    if stopped_tasks:
        await message.answer(f"–§—É–Ω–∫—Ü–∏–∏ {', '.join(stopped_tasks)} –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
    else:
        await message.answer("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")

async def main():
    await bot.delete_webhook(drop_pending_updates=True)
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –∂–¥–µ—Ç –≤—Ö–æ–¥—è—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è...")
    await dp.start_polling(bot)

def check():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ WB API"""
    url = 'https://marketplace-api.wildberries.ru/ping'
    headers = {'Authorization': WB_API}
    try:
        response = requests.get(url, headers=headers)
        return response.status_code == 200
    except requests.exceptions.RequestException:
        return False

async def check_new_orders(msg):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤—ã—Ö –∑–∞–∫–∞–∑–æ–≤"""
    global first_run
    
    while True:
        try:
            url = 'https://marketplace-api.wildberries.ru/api/v3/orders/new'
            headers = {'Authorization': WB_API}
            response = requests.get(url, headers=headers)
            
            if response.status_code == 200:
                data = response.json()
                orders = data.get('orders', [])
                
                if not orders:
                    first_run = False
                    await asyncio.sleep(interval)
                    continue
                
                # –§–∏–ª—å—Ç—Ä—É–µ–º –Ω–æ–≤—ã–µ –∑–∞–∫–∞–∑—ã
                new_orders = [order for order in orders if order['id'] not in processed_orders]
                
                if not new_orders:
                    await asyncio.sleep(interval)
                    continue
                
                # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –∑–∞–∫–∞–∑—ã –≤ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ
                processed_orders.update(order['id'] for order in new_orders)
                
                # –ü–æ–¥—Å—á–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–∞–∫–∞–∑–æ–≤ –∏ –æ–±—â–µ–π —Å—É–º–º—ã
                total_orders = len(new_orders)
                total_sum = sum(order['salePrice'] for order in new_orders)
                
                # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–µ—Ç–∞–ª–µ–π –ø–æ –∫–∞–∂–¥–æ–º—É –∑–∞–∫–∞–∑—É
                order_details = "\n".join(
                    [
                        f"üì¶ –ö–æ–¥ —Ç–æ–≤–∞—Ä–∞: {order['article']}\n"
                        f"üíµ –°—É–º–º–∞: {format_number(order['salePrice']/100)} {get_currency_info(order['currencyCode'])}\n"
                        f"üÜî ID: <code>{order['id']}</code>\n"
                        f"üìÖ –î–∞—Ç–∞: {order['createdAt']}\n"
                        for order in new_orders
                    ]
                )
                
                # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Ç–æ–≥–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
                message_text = (
                    f"üéâ –ù–æ–≤—ã–µ –∑–∞–∫–∞–∑—ã!\n\n"
                    f"üìä –û–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:\n"
                    f"‚Ä¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤: {total_orders}\n"
                    f"‚Ä¢ –û–±—â–∞—è —Å—É–º–º–∞: {format_number(total_sum/100)} {get_currency_info(new_orders[0]['currencyCode'])}\n\n"
                    f"üìã –î–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–æ–≤:\n{order_details}"
                )
                await msg.answer(message_text, parse_mode=ParseMode.HTML)
            else:
                await msg.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ API Wildberries: {response.status_code} - {response.text}")
        
        except Exception as e:
            await msg.answer(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ñ—É–Ω–∫—Ü–∏–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–∫–∞–∑–æ–≤: {str(e)}")
        
        await asyncio.sleep(interval)

async def check_balance(msg):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π –±–∞–ª–∞–Ω—Å–∞"""
    global current_balance, for_withdraw_balance
    
    while True:
        try:
            url = 'https://finance-api.wildberries.ru/api/v1/account/balance'
            headers = {'Authorization': WB_API}
            response = requests.get(url, headers=headers)
            
            if response.status_code == 200:
                data = response.json()
                # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–∞–ø—Ä—è–º—É—é –∏–∑ –æ—Ç–≤–µ—Ç–∞
                current = data.get('current', 0)
                for_withdraw = data.get('for_withdraw', 0)
                currency = data.get('currency', 'RUB')
                
                # –ü–æ–ª—É—á–∞–µ–º —Å–∏–º–≤–æ–ª –≤–∞–ª—é—Ç—ã
                currency_symbol = get_currency_symbol(currency)
                
                # –ü–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫ - –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –±–µ–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
                if current_balance is None:
                    current_balance = current
                    await msg.answer(f"üí∞ –ü–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {format_number(current/100)} {currency_symbol}")
                
                if for_withdraw_balance is None:
                    for_withdraw_balance = for_withdraw
                    await msg.answer(f"üí≥ –ü–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å –¥–ª—è –≤—ã–≤–æ–¥–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {format_number(for_withdraw/100)} {currency_symbol}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ –±–∞–ª–∞–Ω—Å–∞ (—Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏)
                if current_balance is not None and current != current_balance:
                    difference = current - current_balance
                    trend = "üìà" if difference > 0 else "üìâ"
                    
                    message_text = (
                        f"üí∞ –ò–∑–º–µ–Ω–µ–Ω–∏—è –≤ –±–∞–ª–∞–Ω—Å–µ! {trend}\n\n"
                        f"–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å:\n"
                        f"‚Ä¢ –ë—ã–ª–æ: {format_number(current_balance)} {currency_symbol}\n"
                        f"‚Ä¢ –°—Ç–∞–ª–æ: {format_number(current)} {currency_symbol}\n"
                        f"‚Ä¢ –†–∞–∑–Ω–∏—Ü–∞: {format_number(difference)} {currency_symbol}"
                    )
                    await msg.answer(message_text, parse_mode=ParseMode.HTML)
                    current_balance = current  # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞ (—Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏)
                if for_withdraw_balance is not None and for_withdraw != for_withdraw_balance:
                    difference = for_withdraw - for_withdraw_balance
                    trend = "üìà" if difference > 0 else "üìâ"
                    
                    message_text = (
                        f"üí≥ –ò–∑–º–µ–Ω–µ–Ω–∏—è –≤ –±–∞–ª–∞–Ω—Å–µ –¥–ª—è –≤—ã–≤–æ–¥–∞! {trend}\n\n"
                        f"–î–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è –≤—ã–≤–æ–¥–∞:\n"
                        f"‚Ä¢ –ë—ã–ª–æ: {format_number(for_withdraw_balance)} {currency_symbol}\n"
                        f"‚Ä¢ –°—Ç–∞–ª–æ: {format_number(for_withdraw)} {currency_symbol}\n"
                        f"‚Ä¢ –†–∞–∑–Ω–∏—Ü–∞: {format_number(difference)} {currency_symbol}"
                    )
                    await msg.answer(message_text, parse_mode=ParseMode.HTML)
                    for_withdraw_balance = for_withdraw  # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
                
            else:
                await msg.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –±–∞–ª–∞–Ω—Å–∞: {response.status_code} - {response.text}")
        
        except Exception as e:
            await msg.answer(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ñ—É–Ω–∫—Ü–∏–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–ª–∞–Ω—Å–∞: {str(e)}")
        
        await asyncio.sleep(120)

def get_currency_info(currency_code):
    """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∞–ª—é—Ç–µ –ø–æ —á–∏—Å–ª–æ–≤–æ–º—É –∏–ª–∏ —Å—Ç—Ä–æ–∫–æ–≤–æ–º—É –∫–æ–¥—É"""
    # –ï—Å–ª–∏ –∫–æ–¥ —á–∏—Å–ª–æ–≤–æ–π (–∏–∑ –∑–∞–∫–∞–∑–æ–≤)
    if isinstance(currency_code, int):
        currency_info = currency_mapping.get(currency_code, (None, None, f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –≤–∞–ª—é—Ç–∞ ({currency_code})"))
        return currency_info[1] if currency_info[1] else currency_info[2]
    # –ï—Å–ª–∏ –∫–æ–¥ —Å—Ç—Ä–æ–∫–æ–≤—ã–π (–∏–∑ –±–∞–ª–∞–Ω—Å–∞)
    else:
        return currency_symbols.get(currency_code, currency_code)

def get_currency_symbol(currency_code):
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–∏–º–≤–æ–ª –≤–∞–ª—é—Ç—ã –ø–æ —Å—Ç—Ä–æ–∫–æ–≤–æ–º—É –∫–æ–¥—É"""
    return currency_symbols.get(currency_code, currency_code)

def format_number(number):
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —á–∏—Å–ª–æ —Å —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è–º–∏ —Ç—ã—Å—è—á"""
    return "{:,.2f}".format(number).replace(",", "X").replace(".", ",").replace("X", ".")

if __name__ == '__main__':
    asyncio.run(main())